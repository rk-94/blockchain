{"version":3,"sources":["serviceWorker.js","main.js","createChannel.js","index.js","cerner.png"],"names":["Boolean","window","location","hostname","match","template","grid-template-columns","grid-template-rows","grid-gap","region1","grid-column-start","grid-row-start","region2","region3","grid-column-end","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","isLoggedIn","isUserValid","isAdmin","items","hash","id","hostIP","config","port","channelName","chaincodeName","peerName","auth","authToken","toutput","foutput","view","disableHashInput","fhirUrl","Holder","fhirResponse","totalFhirResponse","selectedAnswers","isOpen","handleChangeUsername","bind","assertThisInitialized","handleChangePassword","handleSubmit","handleLogout","handleChangeHash","handleSubmitQuery","reset","_this$state","length","fetchHashValid","_this$state2","setState","e","target","value","_this$state3","fetchUser","alert","fetchURL","_this2","method","headers","authorization","content-Type","fetch","then","response","json","JSON","stringify","Record","_this3","text","fetchData","catch","err","console","log","_this4","_this5","Accept","entry","finalOutput","url","_this6","buttonStyle","margin","_this$state4","Header","react_default","a","createElement","style","border","backgroundColor","width","height","position","Image_default","src","img","isFluid","float","color","loggedInHeader","Button_default","onClick","variant","checkBoxSelection","entries","map","key","paddingLeft","Fragment","fontSize","Checkbox_default","name","disabled","labelText","resource","code","onChange","jsonArg1","resourceType","div","info","meta","lastUpdated","patientInfo","subject","currentTarget","checked","push","splice","values","Card_default","Body","item","dangerouslySetInnerHTML","__html","Divider_default","viewButton","_this$state5","size","LabelValueView_default","ItemDisplay_default","textStyle","icon","IconAlert_default","x","result","logInPage","textAlign","Input_default","type","placeholder","required","mainPage","DynamicGrid_default","defaultTemplate","Region","defaultPosition","paddingInlineStart","adminPage","forceUpdate","_this$state6","Component","ReactDOM","render","main","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a3bdbac6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Button from 'terra-button/lib/Button';\nimport Card from 'terra-card/lib/Card';\nimport Input from 'terra-form-input';\nimport ApplicationMenuName from 'terra-application-name/lib/ApplicationMenuName';\nimport img from './cerner.png';\nimport Image from 'terra-image';\nimport IconAlert from 'terra-icon/lib/icon/IconAlert'\nimport LabelValueView from 'terra-clinical-label-value-view/lib/LabelValueView';\nimport ItemDisplay from 'terra-clinical-item-display';\nimport Checkbox from 'terra-form-checkbox';\nimport Divider from 'terra-divider';\nimport DynamicGrid from 'terra-dynamic-grid/lib/DynamicGrid';\nimport config from './config';\nimport Heading from 'terra-heading/lib/Heading';\n\n// dividng the regions in the webpage\nconst template = {\n    'grid-template-columns': '1fr 1fr',\n    'grid-template-rows': 'auto',\n    'grid-gap': '1px',\n};\n\nconst region1 = {\n    'grid-column-start': 1,\n    'grid-row-start': 2,\n};\n\nconst region2 = {\n    'grid-column-start': 2,\n    'grid-row-start': 2,\n};\nconst region3 = {\n    'grid-column-start': 1,\n    'grid-column-end': 3,\n    'grid-row-start': 1,\n};\n\n\nclass Main extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            'username': '', 'password': '', isLoggedIn: false, isUserValid: false, isAdmin: false,\n            'items': [], 'hash': '', 'id': '', hostIP: config.hostIP, port: config.port, channelName: config.channelName, chaincodeName: config.chaincodeName, peerName: config.peerName,\n            'auth': config.authToken,\n            'toutput': [], 'foutput': [], view: false, disableHashInput: false,\n            fhirUrl: '', Holder: 'Enter a valid Hash provided in the claim',\n            fhirResponse: '',\n            totalFhirResponse: '',\n            selectedAnswers: [], isOpen: false\n        }\n        this.handleChangeUsername = this.handleChangeUsername.bind(this)\n        this.handleChangePassword = this.handleChangePassword.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleLogout = this.handleLogout.bind(this)\n        this.handleChangeHash = this.handleChangeHash.bind(this)\n        this.handleSubmitQuery = this.handleSubmitQuery.bind(this)\n        this.reset = this.reset.bind(this)\n    }\n  \n    componentDidUpdate() {\n        var { hash, Holder } = this.state;\n        var len = hash.length;\n        //Fetch blockchain function triggered hash lenght is met\n        if (len > 33) {\n            this.fetchHashValid()\n        }\n        //When no Checkbox is selected  \n        const { selectedAnswers, view } = this.state;\n        if (selectedAnswers.length === 0 && view) {\n            this.setState({ view: false })\n        }\n        //Restric Input to checkbox when the data extracted\n        if (Holder.length === 34 && hash.length !== 0) {\n            this.setState({ hash: '' })\n        }\n    }\n\n    handleChangeUsername(e) {\n        this.setState({ username: e.target.value });\n    }\n    handleChangePassword(e) {\n        this.setState({ password: e.target.value });\n    }\n    handleSubmit() {\n        //Check the password\n        const { password, username } = this.state;\n        if (username === 'administrator' && password === 'creator') {\n            this.setState({ isAdmin: true })\n        }\n        //Check the USER in blockchain \n        else if ((password === 'blockchain')) {\n            this.fetchUser()\n        } else {\n            this.setState({ isLoggedIn: false })\n            alert(\"Invalid Pasword\")\n        }\n\n    }\n    handleLogout() {\n        this.setState({ isLoggedIn: false, isUserValid: false, fhirUrl: '', username: '', password: '', 'items': [], 'hash': '', fetchURL: '', fhirResponse: '', selectedAnswers: [], Holder: 'Enter a valid Hash provided in the claim', view: false })\n    }\n    handleChangeHash(e) {\n        this.setState({ hash: e.target.value });\n    }\n    handleSubmitQuery() {\n        this.fetchURL();\n    }\n    //A Reset Button that that Refreshes for new Search\n    reset() {\n        this.setState({ fhirUrl: '', disableHashInput: false, 'items': [], 'hash': '', fhirResponse: '', selectedAnswers: [], Holder: 'Enter a valid Hash provided in the claim', view: false })\n    }\n\n    /**********************************\n     * Fetch the data from blockchain\n     **********************************/\n    fetchData() {\n        let config = {\n            method: 'GET',\n            headers: {\n                'authorization': 'Bearer ' + this.state.auth,\n                'content-Type': 'application/json'\n            },\n        }\n        // eslint-disable-next-line\n        fetch('http://' + this.state.hostIP + ':' + this.state.port + '' + '/channels/' + this.state.channelName + '/chaincodes/' + this.state.chaincodeName + '?peer=' + this.state.peerName + '&fcn=queryCustom&args=%5B%22%7B%5C%22selector%5C%22:%7B%5C%22_rev%5C%22:%5C%22' + this.state.hash + '%5C%22,%5C%22payerId%5C%22:%5C%22' + this.state.username + '%5C%22%7D%7D%22%5D', config)\n            .then(response => response.json())\n            .then(response => {\n                if (JSON.stringify(response) === '[]') {\n                    this.setState({ 'items': [] })\n                } else {\n                    this.setState({ 'items': response, fhirUrl: response.Record.fhirUrl, hash: '', Holder: this.state.hash, disableHashInput: true })\n                }\n            })\n\n    }\n\n    /*********************************************\n     * Hash is validated before fetching the data\n     *********************************************/\n    fetchHashValid() {\n        let config = {\n            method: 'GET',\n            headers: {\n                'authorization': 'Bearer ' + this.state.auth,\n                'content-Type': 'application/json'\n            },\n        }\n        // eslint-disable-next-line\n        fetch('http://' + this.state.hostIP + ':' + this.state.port + '' + '/channels/' + this.state.channelName + '/chaincodes/' + this.state.chaincodeName + '?peer=' + this.state.peerName + '&fcn=isValid&args=%5B%22hash%22,%22' + this.state.hash + '%22%5D', config)\n            .then(response => response.text())\n            .then(response => {\n                if (response.length === 0 && response[0] !== 'E') {\n                    this.fetchData()\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    /***********************************************************************\n     * This fetches the USER in Blockchain network to authenticate the LOGIN\n     ***********************************************************************/\n    fetchUser() {\n        let config = {\n            method: 'GET',\n            headers: {\n                'authorization': 'Bearer ' + this.state.auth,\n                'content-Type': 'application/json'\n            },\n        }\n        // eslint-disable-next-line\n        fetch('http://' + this.state.hostIP + ':' + this.state.port + '' + '/channels/' + this.state.channelName + '/chaincodes/' + this.state.chaincodeName + '?peer=' + this.state.peerName + '&fcn=isValid&args=%5B%22payer%22,%22' + this.state.username + '%22%5D', config)\n            .then(response => response.text())\n            .then(response => {\n                if (response.length === 0 && response[0] !== 'E') {\n                    this.setState({ isUserValid: true, isLoggedIn: true })\n                } else {\n                    this.setState({ isUserValid: false })\n                    alert(\"User did not registerd for Blockchain Service\")\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    /******************************************************************\n     * Fetches data from the FHIR URl that recived from the blockchain \n     *****************************************************************/\n    fetchURL() {\n        const fhirUrl = this.state.fhirUrl\n        let config = {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json+fhir'\n            },\n        }\n        fetch(fhirUrl, config)\n            .then(response => response.json())\n            .then((response) => this.setState({ fhirResponse: response.entry, totalFhirResponse: response }));\n\n    }\n\n\n\n    render() {\n        const buttonStyle = { margin: '5px' };\n        const fhirResponse = this.state.fhirResponse;\n        const { view, selectedAnswers } = this.state;\n\n        /*********\n         * Headers\n         *********/\n\n        const Header = <div style={{ border: '1px solid lightGray', backgroundColor: '#2481ca', width: '100%', height: '50px', position: 'relative' }} >\n            <Image src={img} height=\"100px\" width=\"100px\" isFluid style={{ margin: '12px', float: 'left' }} />\n            <h3 style={{ float: 'left', color: 'white', margin: '15px', position: 'relative' }}> Payer Chart Review</h3>\n        </div>\n        const loggedInHeader = <div style={{ border: '1px solid lightGray', backgroundColor: '#2481ca', width: '100%', height: '50px', position: 'relative' }} >\n            <Image src={img} height=\"100px\" width=\"100px\" isFluid style={{ margin: '12px', float: 'left' }} />\n            <h3 style={{ float: 'left', color: 'white', margin: '15px' }}> Payer Chart Review</h3>\n            <Button onClick={this.handleLogout} text=\"Log Out\" variant=\"emphasis\" style={{ float: 'right', height: '45px', position: 'relative' }} />\n        </div>\n\n        /********************************************************************************\n         * Checkbox UI to select the key vlaues to be displayed and push selected elemets to array\n         *********************************************************************************/\n        const checkBoxSelection = Object.entries(fhirResponse).map(key =>\n            <div style={{ margin: 'auto', position: 'relative', paddingLeft: '20px' }}>\n                <React.Fragment key={key}>\n                    <div style={{ width: '500px', margin: 'auto', fontSize: '20px', float: \"right\" }}>\n                        <Checkbox id=\"Data\" name=\"filter\" disabled={this.state.view} labelText={key[1].resource.code.text} onChange={(e) => {\n                            // eslint-disable-next-line\n                            var jsonArg1 = new Object();\n                            jsonArg1.name = key[1].resource.resourceType + key[1].resource.id;\n                            jsonArg1.value = key[1].resource.text.div;\n                            jsonArg1.info = key[1].resource.meta.lastUpdated;\n                            jsonArg1.patientInfo = key[1].resource.subject;\n                            const { selectedAnswers } = this.state;\n                            if (e.currentTarget.checked) {\n                                selectedAnswers.push(jsonArg1);\n                            } else if (!e.currentTarget.checked) {\n                                selectedAnswers.splice(selectedAnswers.values(jsonArg1), 1);\n                            }\n                            this.setState({ selectedAnswers });\n                        }} />\n                    </div>\n                </React.Fragment>\n            </div>\n        )\n\n        /*******************************************************************************\n         * Display the final output retrived from FHIR after checkbox filtering only Entry\n         ********************************************************************************/\n        let finalOutput;\n        if (view && selectedAnswers.length > 0) {\n            finalOutput =\n                <div style={{ margin: '5px' }}>\n                    <Card >\n                        <Card.Body >\n                            <p><b>Additional Clinical Info:</b> </p>\n                            {this.state.selectedAnswers.map(item => (\n                                <React.Fragment key={item.name}>\n                                    <ul>\n                                        <div dangerouslySetInnerHTML={{ __html: item.value }} />\n                                        <p><b>Last Updated:</b> {item.info}</p>\n                                        <Divider />\n                                    </ul>\n                                </React.Fragment>))}\n                        </Card.Body>\n                    </Card>\n                </div>\n        } else {\n            finalOutput = <div>\n            </div>\n        }\n\n        /**************************************************************************************************\n         * Dispaly the Button that fetches the fhirURL on Succsessfull retrivel of Fhir Url from blockchain\n         **************************************************************************************************/\n        let url;\n        const { fhirUrl, hash } = this.state;\n        if (fhirUrl.length > 10) {\n            url = <Button color=\"success\" size=\"lg\" onClick={this.handleSubmitQuery} text=\"Search\" variant=\"action\" style={{ margin: '5px' }} />\n        }\n        //If cant fetch blockchain error is displayed saying invalid hash\n        else if (fhirUrl.length < 10 && hash.length > 33) {\n            url = <div>\n                <LabelValueView >\n                    <ItemDisplay text=\"Invalid or UnAuthorised Hash\" textStyle=\"attention\" icon={<IconAlert />} />\n                </LabelValueView>\n            </div>\n        }\n        //After succsess full fetch  \n        if (fhirResponse.length > 2) {\n            url = <Button color=\"success\" size=\"lg\" onClick={this.reset} text=\"Reset\" variant=\"action\" style={{ margin: '5px' }} />\n\n        }\n\n        /********************************************************************\n         * View Button displayed only after a minimum of one filter selected\n         *******************************************************************/\n        let viewButton;\n        if (selectedAnswers.length > 0) {\n            viewButton =\n                <div style={{ position: 'relative' }}>\n                    <Button color=\"success\" size=\"lg\" onClick={() => { const x = this.state.view; this.setState({ view: !x }) }} text=\"View\" variant=\"action\" style={buttonStyle} />\n                </div>\n\n        } else {\n            viewButton = <div>\n\n            </div>\n        }\n\n        /****************\n         * Login Page UI\n         ****************/\n        const logInPage = <div>\n             {Header}\n       \n        <div style={{ margin: 'auto', height: '500px', width: '500px', textAlign: 'center', position: 'relative' }}>\n\n            <Card style={{ margin: '50px' }}>\n                <Card.Body>\n                    <h1>LOGIN</h1>\n\n                    <Input type=\"text\" placeholder=\"PayerID\" value={this.state.username} onChange={this.handleChangeUsername} required style={{ height: '35px', margin: '5px', width: '350px' }} />\n\n                    <Input type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={this.handleChangePassword} required style={{ height: '35px', margin: '5px', width: '350px' }} />\n\n                    <div style={{ margin: 'auto', textAlign: 'center' }}>\n                        <Button onClick={this.handleSubmit} text=\"Submit\" variant=\"action\" style={buttonStyle} />\n                    </div>\n                </Card.Body>\n            </Card>\n        </div>\n        </div>\n        /***************\n         * Main Page UI \n         ***************/\n        const mainPage = \n            <DynamicGrid defaultTemplate={template}>\n                <DynamicGrid.Region defaultPosition={region3}>\n                   {loggedInHeader}\n                </DynamicGrid.Region>\n\n                <DynamicGrid.Region defaultPosition={region1}>\n                    <div style={{ height: '200px', position: 'absolute', paddingInlineStart: '50px' }}>\n                        <div style={{ margin: 'auto', height: '200px', width: '500px' }}>\n                            <p><b>Query the Additional Clinical Information</b></p>\n                            Hash : <Input required type=\"text\" placeholder={this.state.Holder} value={this.state.hash} onChange={this.handleChangeHash} style={{ margin: 'auto', width: '320px', height: '35px' }} />\n                            {url}\n                        </div>\n                        {checkBoxSelection}\n                        <div style={{ float: \"right\" }}>\n                            {viewButton}\n                        </div>\n                    </div>\n                </DynamicGrid.Region>\n                <DynamicGrid.Region defaultPosition={region2}>\n                    {finalOutput}\n                </DynamicGrid.Region>\n            </DynamicGrid>\n        \n\n        /**\n         * AdminPage\n         */\n        const adminPage = <div>\n            <ul>\n                HostIP : <Input required type=\"text\" placeholder={this.state.hostIP} value={this.state.hostIP} onChange={(e) => { this.setState({ hostIP: e.target.value }); this.forceUpdate(); }} style={{ margin: 'auto', width: '320px', height: '35px' }} />\n            </ul>\n            <ul>\n                port : <Input required type=\"text\" placeholder={this.state.port} value={this.state.port} onChange={(e) => { this.setState({ port: e.target.value }) }} style={{ margin: 'auto', width: '320px', height: '35px' }} />\n            </ul>\n            <ul>\n                channelName : <Input required type=\"text\" placeholder={this.state.channelName} value={this.state.channelName} onChange={(e) => { this.setState({ channelName: e.target.value }) }} style={{ margin: 'auto', width: '320px', height: '35px' }} />\n            </ul>\n            <ul>\n                chaincodeName : <Input required type=\"text\" placeholder={this.state.chaincodeName} value={this.state.chaincodeName} onChange={(e) => { this.setState({ chaincodeName: e.target.value }) }} style={{ margin: 'auto', width: '320px', height: '35px' }} />\n            </ul>\n            <ul>\n                peerName : <Input required type=\"text\" placeholder={this.state.peerName} value={this.state.peerName} onChange={(e) => { this.setState({ peerName: e.target.value }) }} style={{ margin: 'auto', width: '320px', height: '35px' }} />\n            </ul>\n            <ul>\n                <Button color=\"success\" size=\"lg\" onClick={() => { this.setState({ isAdmin: false, username: '', password: '' }) }} text=\"Logout\" variant=\"action\" style={{ margin: '5px' }} />\n            </ul>\n        </div>\n\n        /*******************\n         * Login Validation\n         ********************/\n        let result;\n        const { isUserValid, isAdmin } = this.state;\n        if (isUserValid) {\n            result = mainPage\n\n        } else if (isAdmin) {\n            result = adminPage\n    \n        } else {\n            result = logInPage\n\n        }\n\n        /***********************************\n         * Returning the Rendered Elements\n         *************************************/\n        return (\n            <div>                \n                {result}\n            </div>\n        );\n    }\n}\nexport default Main;\n","import React, { Component } from 'react';\nimport Button from 'terra-button/lib/Button';\nimport netConfig from './config';\n\nclass Channel extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            message: \"\", auth1: '', auth2: '', chaincodeName: 'mycc', channelName: 'mychannel'\n\n        }\n    }\n    registerUser1(){\n        let config = {\n            method: 'POST',\n            headers: {\n              'content-Type': 'application/x-www-form-urlencoded'\n              \n            },\n            body: 'username=Cerner&orgName=Org1'\n          }\n         \n      \n          fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/users', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    this.setState({ auth1: response.token})\n                        \n                          \n                    }\n                this.registerUser2();\n                }\n            );\n    }\n    registerUser2(){\n        let config = {\n            method: 'POST',\n            headers: {\n              'content-Type': 'application/x-www-form-urlencoded'\n              \n            },\n            body: 'username=Cerner&orgName=Org2'\n          }\n         \n      \n          fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/users', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    this.setState({ auth2: response.token})\n                        \n                          \n                    }\n                this.craeteChannel();\n\n                }\n            );\n    }\n    /*\n    craeteChannel() {\n        let config = {\n            method: 'POST',\n            headers: {\n              'authorization': 'Bearer '+this.state.auth1,\n              'content-Type': 'application/json'\n              \n            },\n            body: '{ \"channelName\": \"'+netConfig.channelName+'\", \"channelConfigPath\":\"../artifacts/channel/mychannel.tx\" }'\n                \n                \n           \n          }\n         \n      \n          fetch('http://localhost:4000' + '/channels', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    return true;\n                }\n\n    })\n\n    }*/\n\n    \n    craeteChannel (){\n        //crearte channel\n        let config = {\n            method: 'POST',\n            headers: {\n              'authorization': 'Bearer '+this.state.auth1,\n              'content-Type': 'application/json'\n              \n            },\n            body: '{ \"channelName\": \"'+netConfig.channelName+'\", \"channelConfigPath\":\"../artifacts/channel/mychannel.tx\" }'\n                \n                \n           \n          }\n         \n      \n          fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/channels', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    //join channel\n                    let config = {\n                        method: 'POST',\n                        headers: {\n                          'authorization': 'Bearer '+this.state.auth1,\n                          'content-Type': 'application/json'\n                          \n                        },\n                        body: '{ \"peers\": [\"peer0.org1.example.com\",\"peer1.org1.example.com\"] }'\n                      }\n                     \n                  \n                      fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/channels/'+netConfig.channelName+'/peers', config)\n                        .then(response =>  response.json() )\n                        .then((response) => {\n                            if (response.success === true){\n                                //Join Channel org 2\n                                let config = {\n                                    method: 'POST',\n                                    headers: {\n                                      'authorization': 'Bearer '+this.state.auth2,\n                                      'content-Type': 'application/json'\n                                      \n                                    },\n                                    body: '{ \"peers\": [\"peer0.org2.example.com\",\"peer1.org2.example.com\"] }'\n                                  }\n                                 \n                              \n                                  fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/channels/'+netConfig.channelName+'/peers', config)\n                                    .then(response =>  response.json() )\n                                    .then((response) => {\n                                        \n                                        if (response.success === true){\n                                            let config = {\n                                                method: 'POST',\n                                                headers: {\n                                                  'authorization': 'Bearer '+this.state.auth2,\n                                                  'content-Type': 'application/json'\n                                                  \n                                                },\n                                                body: '{ \"peers\": [\"peer0.org2.example.com\",\"peer1.org2.example.com\"], \"chaincodeName\":\"'+netConfig.chaincodeName+'\", \"chaincodePath\":\"github.com/pcr/blockchain/payerchart/go\",\"chaincodeType\": \"golang\",\"chaincodeVersion\":\"v1\" }'\n                                              }\n                                             \n                                          //install chaincode org1\n                                              fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/chaincodes', config)\n                                                .then(response =>  response.json() )\n                                                .then((response) => {\n                                                    if (response.success === true){\n                                                        let config = {\n                                                            method: 'POST',\n                                                            headers: {\n                                                              'authorization': 'Bearer '+this.state.auth1,\n                                                              'content-Type': 'application/json'\n                                                              \n                                                            },\n                                                            body: '{ \"peers\": [\"peer0.org1.example.com\",\"peer1.org1.example.com\"], \"chaincodeName\":\"'+netConfig.chaincodeName+'\", \"chaincodePath\":\"github.com/pcr/blockchain/payerchart/go\",\"chaincodeType\": \"golang\",\"chaincodeVersion\":\"v1\" }'\n                                              }\n                                                         \n                                                            fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/chaincodes', config)\n                                                            .then(response =>  response.json() )\n                                                            .then((response) => {\n                                                                if (response.success === true){\n                                                                    let config = {\n                                                                        method: 'POST',\n                                                                        headers: {\n                                                                          'authorization': 'Bearer '+this.state.auth1,\n                                                                          'content-Type': 'application/json'\n                                                                          \n                                                                        },\n                                                                        body: '{\"chaincodeName\": \"'+netConfig.chaincodeName+'\", \"chaincodeVersion\":\"v1\", \"chaincodeType\": \"golang\", \"args\":[\"\"] }'\n                                                                            \n\n                                                                            \n                                                                           \n                        \n                                                                      }\n                                                                     \n                                                                  \n                                                                      fetch('http://'+netConfig.hostIP+':'+netConfig.port+'' + '/channels/'+netConfig.channelName+'/chaincodes', config)\n                                                                        .then(response =>  response.json() )\n                                                                        .then((response) => {\n                                                                            if (response.success === true){\n                                                                                this.setState({message: \"Successfully instantiate chaingcode in organization Org1 to the channel 'mychannel'\"})\n                                                                                this.setState({ message: response.message})\n                                                                                \n                                                                                \n                                                            \n                                                                            }\n                                                                        \n                                                                        });\n                                                                    \n                                                                    \n                                                \n                                                                }\n                                                            });\n                                                        \n                                                        \n                                    \n                                                    }\n                                                });\n                                            \n                                            \n                        \n                                        }\n                                    });\n\n                                \n            \n                            }\n                        });\n            \n                        \n                          \n                    }\n\n                }\n            );\n          \n    }\n    instantiate (){\n        let config = {\n            method: 'POST',\n            headers: {\n              'authorization': 'Bearer '+this.state.auth1,\n              'content-Type': 'application/json'\n              \n            },\n            body: '{\"chaincodeName\": \"'+netConfig.chaincodeName+'\", \"chaincodeVersion\":\"v1\", \"chaincodeType\": \"golang\", \"args\":[] }'\n                \n\n                \n               \n\n          }\n         \n      \n          fetch('http://localhost:4000' + '/chaincodes', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    this.setState({message: response.message})\n                    \n                    \n\n                }\n            });\n    }\n    /*\n    joinchannel() {\n        let config = {\n            method: 'POST',\n            headers: {\n              'authorization': 'Bearer '+this.state.auth1,\n              'content-Type': 'application/json'\n              \n            },\n            body: {\n                \"peers\": [\"peer0.org1.example.com\",\"peer1.org1.example.com\"]\n            }\n          }\n         \n      \n          fetch('http://localhost:4000' + '/channels/'+netConfig.channelName+'/peers', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    //Join Channel org 2\n                    let config = {\n                        method: 'POST',\n                        headers: {\n                          'authorization': 'Bearer '+this.state.auth2,\n                          'content-Type': 'application/json'\n                          \n                        },\n                        body: {\n                            \"peers\": [\"peer0.org2.example.com\",\"peer1.org2.example.com\"]\n                        }\n                      }\n                     \n                  \n                      fetch('http://localhost:4000' + '/channels/'+netConfig.channelName+'/peers', config)\n                        .then(response =>  response.json() )\n                        .then((response) => {\n                            if (response.success === true){\n                                installChaincode()\n                                \n                                \n            \n                            }\n                        });\n                    \n\n                }\n            });\n\n    }\n    installChaincode(){\n        let config = {\n            method: 'POST',\n            headers: {\n              'authorization': 'Bearer '+this.state.auth2,\n              'content-Type': 'application/json'\n              \n            },\n            body: {\n                \"peers\": [\"peer0.org2.example.com\",\"peer1.org2.example.com\"],\n                \"chaincodeName\": netConfig.chaincodeName,\n                \"chaincodePath\":\"github.com/chaincode\",\n                \"chaincodeType\": \"golang\",\n                \"chaincodeVersion\":\"v1\"\n            }\n          }\n         \n      \n          fetch('http://localhost:4000' + '/chaincodes', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    let config = {\n                        method: 'POST',\n                        headers: {\n                          'authorization': 'Bearer '+this.state.auth1,\n                          'content-Type': 'application/json'\n                          \n                        },\n                        body: {\n                            \"peers\": [\"peer0.org1.example.com\",\"peer1.org1.example.com\"],\n                            \"chaincodeName\": netConfig.chaincodeName,\n                            \"chaincodePath\":\"github.com/chaincode\",\n                            \"chaincodeType\": \"golang\",\n                            \"chaincodeVersion\":\"v1\"\n                        }\n                      }\n                     \n                  \n                      fetch('http://localhost:4000' + '/chaincodes', config)\n                        .then(response =>  response.json() )\n                        .then((response) => {\n                            if (response.success === true){\n                                instantiateChaincode()\n                                \n                                \n            \n                            }\n                        });\n                    \n                    \n\n                }\n            });\n\n    }\n    instantiateChaincode(){\n        let config = {\n            method: 'POST',\n            headers: {\n              'authorization': 'Bearer '+this.state.auth1,\n              'content-Type': 'application/json'\n              \n            },\n            body: {\n                \"chaincodeName\": netConfig.chaincodeName,\n                \"chaincodeVersion\":\"v1\",\n                \"chaincodeType\": \"golang\",\n                \"args\":[\"\"]\n            }\n          }\n         \n      \n          fetch('http://localhost:4000' + '/chaincodes', config)\n            .then(response =>  response.json() )\n            .then((response) => {\n                if (response.success === true){\n                    this.setState({message: response.message})\n                    \n                    \n\n                }\n            });\n\n    }*/\n\n    render(){\n        return(\n            <div>\n                     <Button color=\"success\" size=\"lg\" onClick={() => { this.registerUser1()}} text=\"CreateChannel\" variant=\"action\" style={{ margin: '5px'}} />\n           <ul>\n            AUTH 1: \n            {this.state.auth1}\n            </ul>\n            <ul>\n            AUTH 2:\n            {this.state.auth2}\n            </ul>\n            \n            <ul>\n            Message: \n            {this.state.message}\n            </ul>  \n            </div>\n        );\n    }\n}\n\nexport default Channel;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './main';\nimport Channel from './createChannel';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cerner.1af909dc.png\";"],"sourceRoot":""}